// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image.proto

#include "image.pb.h"
#include "image.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Rotate_method_names[] = {
  "/Rotate/rot90",
};

std::unique_ptr< Rotate::Stub> Rotate::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rotate::Stub> stub(new Rotate::Stub(channel));
  return stub;
}

Rotate::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_rot90_(Rotate_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rotate::Stub::rot90(::grpc::ClientContext* context, const ::image& request, ::image* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_rot90_, context, request, response);
}

void Rotate::Stub::experimental_async::rot90(::grpc::ClientContext* context, const ::image* request, ::image* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_rot90_, context, request, response, std::move(f));
}

void Rotate::Stub::experimental_async::rot90(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_rot90_, context, request, response, std::move(f));
}

void Rotate::Stub::experimental_async::rot90(::grpc::ClientContext* context, const ::image* request, ::image* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_rot90_, context, request, response, reactor);
}

void Rotate::Stub::experimental_async::rot90(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::image* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_rot90_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::image>* Rotate::Stub::Asyncrot90Raw(::grpc::ClientContext* context, const ::image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::image>::Create(channel_.get(), cq, rpcmethod_rot90_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::image>* Rotate::Stub::PrepareAsyncrot90Raw(::grpc::ClientContext* context, const ::image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::image>::Create(channel_.get(), cq, rpcmethod_rot90_, context, request, false);
}

Rotate::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rotate_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rotate::Service, ::image, ::image>(
          std::mem_fn(&Rotate::Service::rot90), this)));
}

Rotate::Service::~Service() {
}

::grpc::Status Rotate::Service::rot90(::grpc::ServerContext* context, const ::image* request, ::image* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


