// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: image.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

/// <summary>
/// The rotate service definition.
/// </summary>
public static partial class Rotate
{
  static readonly string __ServiceName = "Rotate";

  static readonly grpc::Marshaller<global::image> __Marshaller_image = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::image.Parser.ParseFrom);

  static readonly grpc::Method<global::image, global::image> __Method_rot90 = new grpc::Method<global::image, global::image>(
      grpc::MethodType.Unary,
      __ServiceName,
      "rot90",
      __Marshaller_image,
      __Marshaller_image);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ImageReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of Rotate</summary>
  [grpc::BindServiceMethod(typeof(Rotate), "BindService")]
  public abstract partial class RotateBase
  {
    /// <summary>
    /// Rotates an image
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::image> rot90(global::image request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for Rotate</summary>
  public partial class RotateClient : grpc::ClientBase<RotateClient>
  {
    /// <summary>Creates a new client for Rotate</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public RotateClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for Rotate that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public RotateClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected RotateClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected RotateClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// Rotates an image
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::image rot90(global::image request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return rot90(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Rotates an image
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::image rot90(global::image request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_rot90, null, options, request);
    }
    /// <summary>
    /// Rotates an image
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::image> rot90Async(global::image request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return rot90Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Rotates an image
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::image> rot90Async(global::image request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_rot90, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override RotateClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new RotateClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(RotateBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_rot90, serviceImpl.rot90).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, RotateBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_rot90, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::image, global::image>(serviceImpl.rot90));
  }

}
#endregion
